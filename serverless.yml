service: bus-tracking-system

# Configuration validation settings
configValidationMode: error

provider:
  name: aws
  runtime: nodejs18.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'ap-south-1'}
  memorySize: 256
  timeout: 30

  environment:
    ROUTES_TABLE: ${self:service}-${opt:stage, self:provider.stage}-routes
    BUSES_TABLE: ${self:service}-${opt:stage, self:provider.stage}-buses
    LOCATIONS_TABLE: ${self:service}-${opt:stage, self:provider.stage}-locations
    LIVE_LOCATIONS_TABLE: ${self:service}-${opt:stage, self:provider.stage}-live-locations
    SCHEDULES_TABLE: ${self:service}-${opt:stage, self:provider.stage}-schedules
    USERS_TABLE: ${self:service}-${opt:stage, self:provider.stage}-users
    NODE_ENV: ${opt:stage, self:provider.stage}
    # Production secrets from SSM Parameter Store
    JWT_SECRET: ${ssm:/bus-tracking-system/${opt:stage, self:provider.stage}/jwt-secret}
    # Redis configuration (disabled for production safety)
    REDIS_URL: ''
    REDIS_HOST: ''
    REDIS_PORT: ''

  # VPC configuration for Redis access in production
  vpc:
    securityGroupIds:
      - Fn::If:
          - IsProduction
          - Ref: LambdaSecurityGroup
          - Ref: AWS::NoValue
    subnetIds:
      - Fn::If:
          - IsProduction
          - Ref: PrivateSubnet1
          - Ref: AWS::NoValue
      - Fn::If:
          - IsProduction
          - Ref: PrivateSubnet2
          - Ref: AWS::NoValue

  iam:
    role:
      name: bus-tracking-system-${opt:stage, self:provider.stage}-lambda-role
      path: /
      statements:
        # DynamoDB permissions for all tables and indexes
        - Effect: Allow
          Action:
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:DescribeTable
            - dynamodb:BatchWriteItem
            - dynamodb:BatchGetItem
          Resource:
            # Routes table and indexes
            - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.ROUTES_TABLE}"
            - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.ROUTES_TABLE}/index/*"
            # Buses table and indexes
            - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.BUSES_TABLE}"
            - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.BUSES_TABLE}/index/*"
            # Live Locations table and indexes
            - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.LIVE_LOCATIONS_TABLE}"
            - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.LIVE_LOCATIONS_TABLE}/index/*"
            # Legacy locations table (if still needed)
            - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.LOCATIONS_TABLE}"
            - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.LOCATIONS_TABLE}/index/*"
            # Users table and indexes
            - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}"
            - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}/index/*"
            # Schedules table and indexes
            - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.SCHEDULES_TABLE}"
            - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.SCHEDULES_TABLE}/index/*"

        - Effect: Allow
          Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - logs:DescribeLogEvents
            - logs:DescribeLogStreams
          Resource: "arn:aws:logs:${opt:region, self:provider.region}:*:log-group:/aws/lambda/${self:service}-${opt:stage, self:provider.stage}*:*"

        # SSM Parameter Store permissions for secrets management
        - Effect: Allow
          Action:
            - ssm:GetParameter
            - ssm:GetParameters
            - ssm:GetParametersByPath
          Resource: 
            - "arn:aws:ssm:${opt:region, self:provider.region}:*:parameter/${self:service}/${opt:stage, self:provider.stage}/*"

        # Note: Additional deployment permissions are provided via the IAM policy
        # attached to the deployment user/role (see iam-policy.json)

        # VPC and ENI permissions for Lambda functions
        - Effect: Allow
          Action:
            - ec2:CreateNetworkInterface
            - ec2:DescribeNetworkInterfaces
            - ec2:DeleteNetworkInterface
            - ec2:AttachNetworkInterface
            - ec2:DetachNetworkInterface
          Resource: "*"

        # Redis ElastiCache permissions
        - Effect: Allow
          Action:
            - elasticache:DescribeCacheClusters
            - elasticache:DescribeReplicationGroups
          Resource: "*"

custom:

  redis:
    dev:
      host: localhost
      port: 6379
    staging:
      host: localhost
      port: 6379
    prod:
      host: !GetAtt RedisReplicationGroup.PrimaryEndPoint.Address
      port: !GetAtt RedisReplicationGroup.PrimaryEndPoint.Port

  dynamodb:
    start:
      port: 8000
      inMemory: true
      migrate: true
    stages:
      - dev

functions:
  # =============================================================================
  # JWT LAMBDA AUTHORIZER
  # =============================================================================
  auth:
    handler: src/handlers/auth.authorize
    description: JWT Lambda Authorizer for API Gateway authentication and RBAC

  # =============================================================================
  # AUTHENTICATION ENDPOINTS - No authorization required
  # =============================================================================
  authRegister:
    handler: src/handlers/auth-endpoints.register
    description: User registration endpoint
    events:
      - http:
          path: auth/register
          method: post
          cors: true

  authLogin:
    handler: src/handlers/auth-endpoints.login
    description: User login endpoint
    events:
      - http:
          path: auth/login
          method: post
          cors: true

  authRefresh:
    handler: src/handlers/auth-endpoints.refresh
    description: JWT token refresh endpoint
    events:
      - http:
          path: auth/refresh
          method: post
          cors: true

  authProfile:
    handler: src/handlers/auth-endpoints.getProfile
    description: Get current user profile
    events:
      - http:
          path: auth/profile
          method: get
          cors: true
          authorizer: auth

  authLogout:
    handler: src/handlers/auth-endpoints.logout
    description: User logout endpoint
    events:
      - http:
          path: auth/logout
          method: post
          cors: true
          authorizer: auth

  # =============================================================================
  # PUBLIC ENDPOINTS - No authentication required, aggressive caching
  # =============================================================================
  publicGetRoutes:
    handler: src/handlers/public/routes.getRoutes
    description: Public - Get all routes with pagination and caching (no auth required)
    events:
      - http:
          path: public/routes
          method: get
          cors: true

  publicGetRoute:
    handler: src/handlers/public/routes.getRoute
    description: Public - Get specific route details with caching (no auth required)
    events:
      - http:
          path: public/routes/{routeId}
          method: get
          cors: true
          request:
            parameters:
              paths:
                routeId: true

  publicGetLiveBuses:
    handler: src/handlers/public/routes.getLiveBuses
    description: Public - Get live buses on route with aggressive caching (no auth required)
    events:
      - http:
          path: public/routes/{routeId}/buses/live
          method: get
          cors: true

          request:
            parameters:
              paths:
                routeId: true
          # No authorizer - public endpoint

  publicSearchRoutes:
    handler: src/handlers/public/routes.searchRoutes
    description: Public - Search routes by name or location (no auth required)
    events:
      - http:
          path: public/routes/search
          method: get
          cors: true

          # No authorizer - public endpoint

  # =============================================================================
  # PUBLIC SCHEDULE ENDPOINTS - No authentication required
  # =============================================================================
  publicGetRouteSchedules:
    handler: src/handlers/public/schedules.getRouteSchedules
    description: Public - Get all schedules for a specific route (no auth required)
    events:
      - http:
          path: public/routes/{routeId}/schedules
          method: get
          cors: true
          request:
            parameters:
              paths:
                routeId: true
              querystrings:
                date: false
                period: false
                status: false
                page: false
                limit: false

  publicGetSchedules:
    handler: src/handlers/public/schedules.getSchedules
    description: Public - Get all schedules with filtering (no auth required)
    events:
      - http:
          path: public/schedules
          method: get
          cors: true
          request:
            parameters:
              querystrings:
                date: false
                routeId: false
                period: false
                status: false
                busId: false
                page: false
                limit: false

  publicGetSchedule:
    handler: src/handlers/public/schedules.getSchedule
    description: Public - Get specific schedule details (no auth required)
    events:
      - http:
          path: public/schedules/{scheduleId}
          method: get
          cors: true
          request:
            parameters:
              paths:
                scheduleId: true

  # =============================================================================
  # PUBLIC ENDPOINTS (COMMUTER ROLE) - Read-only access
  # =============================================================================
  getRoutes:
    handler: src/handlers/routes.getRoutes
    description: Get all bus routes (public access - no auth required)
    events:
      - http:
          path: routes
          method: get
          cors: true

          # No authorizer - public endpoint

  getRoute:
    handler: src/handlers/routes.getRoute
    description: Get a specific bus route by ID (public access - no auth required)
    events:
      - http:
          path: routes/{routeId}
          method: get
          cors: true

          # No authorizer - public endpoint
          request:
            parameters:
              paths:
                routeId: true

  getLiveBuses:
    handler: src/handlers/routes.getLiveBuses
    description: Get live buses on a specific route (public access)
    events:
      - http:
          path: routes/{routeId}/buses/live
          method: get
          cors: true
          authorizer:
            name: auth
            type: TOKEN
            identitySource: method.request.header.Authorization
          request:
            parameters:
              paths:
                routeId: true

  # =============================================================================
  # OPERATOR ENDPOINTS (BUS_OPERATOR ROLE) - Location updates + read access
  # =============================================================================
  getBus:
    handler: src/handlers/buses.getBus
    description: Get bus information (operator access)
    events:
      - http:
          path: buses/{busId}
          method: get
          cors: true

          authorizer:
            name: auth
            type: TOKEN
            identitySource: method.request.header.Authorization
          request:
            parameters:
              paths:
                busId: true

  updateBus:
    handler: src/handlers/buses.updateBus
    description: Update bus information (operator access)
    events:
      - http:
          path: buses/{busId}
          method: put
          cors: true

          authorizer:
            name: auth
            type: TOKEN
            identitySource: method.request.header.Authorization
          request:
            parameters:
              paths:
                busId: true

  getLocation:
    handler: src/handlers/location.getLocation
    description: Get latest bus location (operator access)
    events:
      - http:
          path: buses/{busId}/location
          method: get
          cors: true

          authorizer:
            name: auth
            type: TOKEN
            identitySource: method.request.header.Authorization
          request:
            parameters:
              paths:
                busId: true

  updateLocation:
    handler: src/handlers/location.updateLocation
    description: Update bus location (operator access)
    events:
      - http:
          path: buses/{busId}/location
          method: put
          cors: true

          authorizer:
            name: auth
            type: TOKEN
            identitySource: method.request.header.Authorization
          request:
            parameters:
              paths:
                busId: true

  # =============================================================================
  # ADMIN ENDPOINTS (NTC ROLE) - Full administrative access
  # =============================================================================
  adminGetRoutes:
    handler: src/handlers/admin/routes.getAllRoutes
    description: Admin - Get all routes with full details (NTC only)
    events:
      - http:
          path: admin/routes
          method: get
          cors: true
          authorizer:
            name: auth
            type: TOKEN
            identitySource: method.request.header.Authorization

  adminGetRoute:
    handler: src/handlers/admin/routes.getRoute
    description: Admin - Get specific route with admin details (NTC only)
    events:
      - http:
          path: admin/routes/{routeId}
          method: get
          cors: true

          authorizer:
            name: auth
            type: TOKEN
            identitySource: method.request.header.Authorization
          request:
            parameters:
              paths:
                routeId: true

  adminCreateRoute:
    handler: src/handlers/admin/routes.createRoute
    description: Admin - Create new route (NTC only)
    events:
      - http:
          path: admin/routes
          method: post
          cors: true

          authorizer:
            name: auth
            type: TOKEN
            identitySource: method.request.header.Authorization

  adminUpdateRoute:
    handler: src/handlers/admin/routes.updateRoute
    description: Admin - Update route (NTC only)
    events:
      - http:
          path: admin/routes/{routeId}
          method: put
          cors: true

          authorizer:
            name: auth
            type: TOKEN
            identitySource: method.request.header.Authorization
          request:
            parameters:
              paths:
                routeId: true

  adminDeleteRoute:
    handler: src/handlers/admin/routes.deleteRoute
    description: Admin - Delete route (NTC only)
    events:
      - http:
          path: admin/routes/{routeId}
          method: delete
          cors: true

          authorizer:
            name: auth
            type: TOKEN
            identitySource: method.request.header.Authorization
          request:
            parameters:
              paths:
                routeId: true

  adminGetBuses:
    handler: src/handlers/admin.getBuses
    description: Admin - Get all buses with full details (NTC only)
    events:
      - http:
          path: admin/buses
          method: get
          cors: true

          authorizer:
            name: auth
            type: TOKEN
            identitySource: method.request.header.Authorization

  adminCreateBus:
    handler: src/handlers/admin.createBus
    description: Admin - Create new bus (NTC only)
    events:
      - http:
          path: admin/buses
          method: post
          cors: true
          authorizer:
            name: auth
            type: TOKEN
            identitySource: method.request.header.Authorization

  adminUpdateBus:
    handler: src/handlers/admin.updateBus
    description: Admin - Update bus (NTC only)
    events:
      - http:
          path: admin/buses/{busId}
          method: put
          cors: true
          authorizer:
            name: auth
            type: TOKEN
            identitySource: method.request.header.Authorization
          request:
            parameters:
              paths:
                busId: true

  adminDeleteBus:
    handler: src/handlers/admin.deleteBus
    description: Admin - Delete bus (NTC only)
    events:
      - http:
          path: admin/buses/{busId}
          method: delete
          cors: true
          authorizer:
            name: auth
            type: TOKEN
            identitySource: method.request.header.Authorization
          request:
            parameters:
              paths:
                busId: true

  adminGetHistory:
    handler: src/handlers/admin.getHistory
    description: Admin - Get location history and analytics (NTC only)
    events:
      - http:
          path: admin/history
          method: get
          cors: true
          authorizer:
            name: auth
            type: TOKEN
            identitySource: method.request.header.Authorization

  adminGetBusHistory:
    handler: src/handlers/admin.getBusHistory
    description: Admin - Get specific bus location history (NTC only)
    events:
      - http:
          path: admin/history/{busId}
          method: get
          cors: true
          authorizer:
            name: auth
            type: TOKEN
            identitySource: method.request.header.Authorization
          request:
            parameters:
              paths:
                busId: true

  # =============================================================================
  # OPERATOR ENDPOINTS (BUS_OPERATOR role required)
  # =============================================================================
  operatorGetBuses:
    handler: src/handlers/operator/buses.getBuses
    description: Operator - Get all buses owned by operator (BUS_OPERATOR only)
    events:
      - http:
          path: operator/buses
          method: get
          cors: true
          authorizer:
            name: auth
            type: TOKEN
            identitySource: method.request.header.Authorization

  operatorGetBus:
    handler: src/handlers/operator/buses.getBus
    description: Operator - Get specific bus details (BUS_OPERATOR only)
    events:
      - http:
          path: operator/buses/{busId}
          method: get
          cors: true
          authorizer:
            name: auth
            type: TOKEN
            identitySource: method.request.header.Authorization
          request:
            parameters:
              paths:
                busId: true

  operatorCreateBus:
    handler: src/handlers/operator/buses.createBus
    description: Operator - Create new bus (BUS_OPERATOR only)
    events:
      - http:
          path: operator/buses
          method: post
          cors: true
          authorizer:
            name: auth
            type: TOKEN
            identitySource: method.request.header.Authorization

  operatorUpdateBus:
    handler: src/handlers/operator/buses.updateBus
    description: Operator - Update bus details (BUS_OPERATOR only)
    events:
      - http:
          path: operator/buses/{busId}
          method: put
          cors: true
          authorizer:
            name: auth
            type: TOKEN
            identitySource: method.request.header.Authorization
          request:
            parameters:
              paths:
                busId: true

  operatorDeleteBus:
    handler: src/handlers/operator/buses.deleteBus
    description: Operator - Delete bus (BUS_OPERATOR only)
    events:
      - http:
          path: operator/buses/{busId}
          method: delete
          cors: true
          authorizer:
            name: auth
            type: TOKEN
            identitySource: method.request.header.Authorization
          request:
            parameters:
              paths:
                busId: true

  operatorUpdateLocation:
    handler: src/handlers/operator/buses.updateLocation
    description: Operator - Update bus location with timestamp validation (BUS_OPERATOR only)
    events:
      - http:
          path: operator/buses/{busId}/location
          method: put
          cors: true
          authorizer:
            name: auth
            type: TOKEN
            identitySource: method.request.header.Authorization
          request:
            parameters:
              paths:
                busId: true

  operatorGetLocation:
    handler: src/handlers/operator/buses.getLocation
    description: Operator - Get current bus location (BUS_OPERATOR only)
    events:
      - http:
          path: operator/buses/{busId}/location
          method: get
          cors: true
          authorizer:
            name: auth
            type: TOKEN
            identitySource: method.request.header.Authorization
          request:
            parameters:
              paths:
                busId: true

  # =============================================================================
  # UTILITY ENDPOINTS
  # =============================================================================
  healthCheck:
    handler: src/handlers/health.ping
    description: Health check endpoint (no auth required)
    events:
      - http:
          path: status/ping
          method: get
          cors: true

  # =============================================================================
  # BACKGROUND SERVICES
  # =============================================================================
  cacheInvalidator:
    handler: src/handlers/cache.invalidateCache
    description: DynamoDB stream processor for cache invalidation
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt: [LocationsTable, StreamArn]
          batchSize: 10
          enabled: true
          startingPosition: LATEST

resources:
  Resources:

    # =============================================================================
    # DYNAMODB TABLES
    # =============================================================================
    RoutesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.ROUTES_TABLE}
        AttributeDefinitions:
          - AttributeName: RouteID
            AttributeType: S
        KeySchema:
          - AttributeName: RouteID
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        # Production-ready settings
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true
        DeletionProtectionEnabled: true
        Tags:
          - Key: Environment
            Value: ${opt:stage, self:provider.stage}
          - Key: Service
            Value: ${self:service}
          - Key: Component
            Value: Routes
 

    BusesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.BUSES_TABLE}
        AttributeDefinitions:
          - AttributeName: BusID
            AttributeType: S
          - AttributeName: OperatorID
            AttributeType: S
        KeySchema:
          - AttributeName: BusID
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: OperatorIndex
            KeySchema:
              - AttributeName: OperatorID
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
        # Production-ready settings
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true
        DeletionProtectionEnabled: true
        Tags:
          - Key: Environment
            Value: ${opt:stage, self:provider.stage}
          - Key: Service
            Value: ${self:service}
          - Key: Component
            Value: Buses


    LocationsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.LOCATIONS_TABLE}
        AttributeDefinitions:
          - AttributeName: BusID
            AttributeType: S
          - AttributeName: timestamp
            AttributeType: S
          - AttributeName: route_id
            AttributeType: S
        KeySchema:
          - AttributeName: BusID
            KeyType: HASH
          - AttributeName: timestamp
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: RouteID-timestamp-index
            KeySchema:
              - AttributeName: route_id
                KeyType: HASH
              - AttributeName: timestamp
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        TimeToLiveSpecification:
          AttributeName: ttl
          Enabled: true
        # Production-ready settings
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true
        DeletionProtectionEnabled: true
        Tags:
          - Key: Environment
            Value: ${opt:stage, self:provider.stage}
          - Key: Service
            Value: ${self:service}
          - Key: Component
            Value: Locations

    LiveLocationsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.LIVE_LOCATIONS_TABLE}
        AttributeDefinitions:
          - AttributeName: BusID
            AttributeType: S
          - AttributeName: timestamp
            AttributeType: S
          - AttributeName: route_id
            AttributeType: S
        KeySchema:
          - AttributeName: BusID
            KeyType: HASH
          - AttributeName: timestamp
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: RouteID-timestamp-index
            KeySchema:
              - AttributeName: route_id
                KeyType: HASH
              - AttributeName: timestamp
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        TimeToLiveSpecification:
          AttributeName: ttl
          Enabled: true
   

    # =============================================================================
    # USERS TABLE FOR AUTHENTICATION
    # =============================================================================
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-${opt:stage, self:provider.stage}-users
        AttributeDefinitions:
          - AttributeName: username
            AttributeType: S
          - AttributeName: email
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: username
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: EmailIndex
            KeySchema:
              - AttributeName: email
                KeyType: HASH
            Projection:
              ProjectionType: ALL
          - IndexName: UserIdIndex
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
   

    # =============================================================================
    # SCHEDULES TABLE FOR BUS SCHEDULES
    # =============================================================================
    SchedulesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-${opt:stage, self:provider.stage}-schedules
        AttributeDefinitions:
          - AttributeName: ScheduleID
            AttributeType: S
          - AttributeName: route_id
            AttributeType: S
          - AttributeName: schedule_date
            AttributeType: S
          - AttributeName: BusID
            AttributeType: S
        KeySchema:
          - AttributeName: ScheduleID
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: RouteScheduleIndex
            KeySchema:
              - AttributeName: route_id
                KeyType: HASH
              - AttributeName: schedule_date
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: BusScheduleIndex
            KeySchema:
              - AttributeName: BusID
                KeyType: HASH
              - AttributeName: schedule_date
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: DateScheduleIndex
            KeySchema:
              - AttributeName: schedule_date
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
        # Additional attributes: route_name, day_of_week, trip_number, trip_period, 
        # departure_time, estimated_arrival_time, departure_datetime, estimated_arrival_datetime,
        # trip_status, duration_hours, start_location, end_location, driver_name, 
        # conductor_name, bus_capacity, license_plate, created_at, updated_at

    # Redis ElastiCache Replication Group (only for production)
    RedisReplicationGroup:
      Type: AWS::ElastiCache::ReplicationGroup
      Condition: IsProduction
      Properties:
        ReplicationGroupId: ${self:service}-${opt:stage, self:provider.stage}-redis
        Description: Redis replication group for bus tracking system
        CacheNodeType: cache.t3.micro
        Engine: redis
        EngineVersion: "7.0"
        NumCacheClusters: 2  # 1 primary + 1 replica
        AutomaticFailoverEnabled: false
        MultiAZEnabled: false
        CacheSubnetGroupName: !Ref RedisSubnetGroup
        SecurityGroupIds:
          - !Ref RedisSecurityGroup
        AtRestEncryptionEnabled: true
        TransitEncryptionEnabled: false  # Disabled to avoid auth token complexity
        Port: 6379

    RedisSubnetGroup:
      Type: AWS::ElastiCache::SubnetGroup
      Condition: IsProduction
      Properties:
        Description: Subnet group for Redis cluster
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2

    # VPC Infrastructure
    VPC:
      Type: AWS::EC2::VPC
      Condition: IsProduction
      Properties:
        CidrBlock: 10.0.0.0/16
        EnableDnsHostnames: true
        EnableDnsSupport: true
        Tags:
          - Key: Name
            Value: ${self:service}-${opt:stage, self:provider.stage}-vpc

    InternetGateway:
      Type: AWS::EC2::InternetGateway
      Condition: IsProduction
      Properties:
        Tags:
          - Key: Name
            Value: ${self:service}-${opt:stage, self:provider.stage}-igw

    VPCGatewayAttachment:
      Type: AWS::EC2::VPCGatewayAttachment
      Condition: IsProduction
      Properties:
        VpcId: !Ref VPC
        InternetGatewayId: !Ref InternetGateway

    # Public Subnets
    PublicSubnet1:
      Type: AWS::EC2::Subnet
      Condition: IsProduction
      Properties:
        VpcId: !Ref VPC
        CidrBlock: 10.0.1.0/24
        AvailabilityZone: !Select [0, !GetAZs ""]
        MapPublicIpOnLaunch: true
        Tags:
          - Key: Name
            Value: ${self:service}-${opt:stage, self:provider.stage}-public-subnet-1

    PublicSubnet2:
      Type: AWS::EC2::Subnet
      Condition: IsProduction
      Properties:
        VpcId: !Ref VPC
        CidrBlock: 10.0.2.0/24
        AvailabilityZone: !Select [1, !GetAZs ""]
        MapPublicIpOnLaunch: true
        Tags:
          - Key: Name
            Value: ${self:service}-${opt:stage, self:provider.stage}-public-subnet-2

    # Private Subnets
    PrivateSubnet1:
      Type: AWS::EC2::Subnet
      Condition: IsProduction
      Properties:
        VpcId: !Ref VPC
        CidrBlock: 10.0.10.0/24
        AvailabilityZone: !Select [0, !GetAZs ""]
        Tags:
          - Key: Name
            Value: ${self:service}-${opt:stage, self:provider.stage}-private-subnet-1

    PrivateSubnet2:
      Type: AWS::EC2::Subnet
      Condition: IsProduction
      Properties:
        VpcId: !Ref VPC
        CidrBlock: 10.0.20.0/24
        AvailabilityZone: !Select [1, !GetAZs ""]
        Tags:
          - Key: Name
            Value: ${self:service}-${opt:stage, self:provider.stage}-private-subnet-2

    # NAT Gateway
    NatGatewayEIP:
      Type: AWS::EC2::EIP
      Condition: IsProduction
      DependsOn: VPCGatewayAttachment
      Properties:
        Domain: vpc
        Tags:
          - Key: Name
            Value: ${self:service}-${opt:stage, self:provider.stage}-nat-eip

    NatGateway:
      Type: AWS::EC2::NatGateway
      Condition: IsProduction
      Properties:
        AllocationId: !GetAtt NatGatewayEIP.AllocationId
        SubnetId: !Ref PublicSubnet1
        Tags:
          - Key: Name
            Value: ${self:service}-${opt:stage, self:provider.stage}-nat-gateway

    # Route Tables
    PublicRouteTable:
      Type: AWS::EC2::RouteTable
      Condition: IsProduction
      Properties:
        VpcId: !Ref VPC
        Tags:
          - Key: Name
            Value: ${self:service}-${opt:stage, self:provider.stage}-public-rt

    PublicRoute:
      Type: AWS::EC2::Route
      Condition: IsProduction
      DependsOn: VPCGatewayAttachment
      Properties:
        RouteTableId: !Ref PublicRouteTable
        DestinationCidrBlock: 0.0.0.0/0
        GatewayId: !Ref InternetGateway

    PublicSubnet1RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Condition: IsProduction
      Properties:
        SubnetId: !Ref PublicSubnet1
        RouteTableId: !Ref PublicRouteTable

    PublicSubnet2RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Condition: IsProduction
      Properties:
        SubnetId: !Ref PublicSubnet2
        RouteTableId: !Ref PublicRouteTable

    PrivateRouteTable:
      Type: AWS::EC2::RouteTable
      Condition: IsProduction
      Properties:
        VpcId: !Ref VPC
        Tags:
          - Key: Name
            Value: ${self:service}-${opt:stage, self:provider.stage}-private-rt

    PrivateRoute:
      Type: AWS::EC2::Route
      Condition: IsProduction
      Properties:
        RouteTableId: !Ref PrivateRouteTable
        DestinationCidrBlock: 0.0.0.0/0
        NatGatewayId: !Ref NatGateway

    PrivateSubnet1RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Condition: IsProduction
      Properties:
        SubnetId: !Ref PrivateSubnet1
        RouteTableId: !Ref PrivateRouteTable

    PrivateSubnet2RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Condition: IsProduction
      Properties:
        SubnetId: !Ref PrivateSubnet2
        RouteTableId: !Ref PrivateRouteTable

    # Security Groups
    ALBSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Condition: IsProduction
      Properties:
        GroupDescription: Security group for Application Load Balancer
        VpcId: !Ref VPC
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: 0.0.0.0/0
            Description: HTTP access from anywhere
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: 0.0.0.0/0
            Description: HTTPS access from anywhere
        SecurityGroupEgress:
          - IpProtocol: -1
            CidrIp: 0.0.0.0/0
            Description: All outbound traffic
        Tags:
          - Key: Name
            Value: ${self:service}-${opt:stage, self:provider.stage}-alb-sg

    LambdaSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Condition: IsProduction
      Properties:
        GroupDescription: Security group for Lambda functions
        VpcId: !Ref VPC
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            SourceSecurityGroupId: !Ref ALBSecurityGroup
            Description: HTTP from ALB
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            SourceSecurityGroupId: !Ref ALBSecurityGroup
            Description: HTTPS from ALB
        SecurityGroupEgress:
          - IpProtocol: -1
            CidrIp: 0.0.0.0/0
            Description: All outbound traffic
        Tags:
          - Key: Name
            Value: ${self:service}-${opt:stage, self:provider.stage}-lambda-sg

    RedisSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Condition: IsProduction
      Properties:
        GroupDescription: Security group for Redis cluster
        VpcId: !Ref VPC
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 6379
            ToPort: 6379
            SourceSecurityGroupId: !Ref LambdaSecurityGroup
            Description: Redis access from Lambda functions
        Tags:
          - Key: Name
            Value: ${self:service}-${opt:stage, self:provider.stage}-redis-sg

  Conditions:
    IsProduction:
      Fn::Equals:
        - ${opt:stage, self:provider.stage}
        - never-create-redis-disabled-for-production

  Outputs:
    VPCId:
      Description: VPC ID
      Value: !Ref VPC
      Condition: IsProduction
      Export:
        Name: ${self:service}-${opt:stage, self:provider.stage}-vpc-id

    PublicSubnet1Id:
      Description: Public subnet 1 ID
      Value: !Ref PublicSubnet1
      Condition: IsProduction
      Export:
        Name: ${self:service}-${opt:stage, self:provider.stage}-public-subnet-1

    PublicSubnet2Id:
      Description: Public subnet 2 ID
      Value: !Ref PublicSubnet2
      Condition: IsProduction
      Export:
        Name: ${self:service}-${opt:stage, self:provider.stage}-public-subnet-2

    PrivateSubnet1Id:
      Description: Private subnet 1 ID
      Value: !Ref PrivateSubnet1
      Condition: IsProduction
      Export:
        Name: ${self:service}-${opt:stage, self:provider.stage}-private-subnet-1

    PrivateSubnet2Id:
      Description: Private subnet 2 ID
      Value: !Ref PrivateSubnet2
      Condition: IsProduction
      Export:
        Name: ${self:service}-${opt:stage, self:provider.stage}-private-subnet-2

    ALBSecurityGroupId:
      Description: ALB security group ID
      Value: !Ref ALBSecurityGroup
      Condition: IsProduction
      Export:
        Name: ${self:service}-${opt:stage, self:provider.stage}-alb-sg

    LambdaSecurityGroupId:
      Description: Lambda security group ID
      Value: !Ref LambdaSecurityGroup
      Condition: IsProduction
      Export:
        Name: ${self:service}-${opt:stage, self:provider.stage}-lambda-sg

    RedisSecurityGroupId:
      Description: Redis security group ID
      Value: !Ref RedisSecurityGroup
      Condition: IsProduction
      Export:
        Name: ${self:service}-${opt:stage, self:provider.stage}-redis-sg

    RedisEndpointAddress:
      Description: Redis replication group primary endpoint address
      Value: !GetAtt RedisReplicationGroup.PrimaryEndPoint.Address
      Condition: IsProduction
      Export:
        Name: ${self:service}-${opt:stage, self:provider.stage}-redis-endpoint

    RedisEndpointPort:
      Description: Redis replication group primary endpoint port
      Value: !GetAtt RedisReplicationGroup.PrimaryEndPoint.Port
      Condition: IsProduction
      Export:
        Name: ${self:service}-${opt:stage, self:provider.stage}-redis-port

    NatGatewayId:
      Description: NAT Gateway ID
      Value: !Ref NatGateway
      Condition: IsProduction
      Export:
        Name: ${self:service}-${opt:stage, self:provider.stage}-nat-gateway

 
plugins:
  - serverless-offline
  - serverless-dynamodb-local

