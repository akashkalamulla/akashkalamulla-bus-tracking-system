service: bus-tracking-system

# Configuration validation settings
configValidationMode: error

provider:
  name: aws
  runtime: nodejs18.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'ap-south-1'}
  memorySize: 256
  timeout: 30

  environment:
    ROUTES_TABLE: ${self:service}-${opt:stage, self:provider.stage}-routes
    BUSES_TABLE: ${self:service}-${opt:stage, self:provider.stage}-buses
    LOCATIONS_TABLE: ${self:service}-${opt:stage, self:provider.stage}-locations
    LIVE_LOCATIONS_TABLE: ${self:service}-${opt:stage, self:provider.stage}-live-locations
    REDIS_HOST: ${self:custom.redis.${opt:stage, self:provider.stage}.host}
    REDIS_PORT: ${self:custom.redis.${opt:stage, self:provider.stage}.port}
    REDIS_ENDPOINT: 
      Fn::If:
        - IsProduction
        - Fn::GetAtt: [RedisReplicationGroup, PrimaryEndPoint.Address]
        - "localhost"
    REDIS_PORT_REF:
      Fn::If:
        - IsProduction
        - Fn::GetAtt: [RedisReplicationGroup, PrimaryEndPoint.Port]
        - 6379
    NODE_ENV: ${opt:stage, self:provider.stage}

  iam:
    role:
      name: bus-tracking-system-${opt:stage, self:provider.stage}-lambda-role
      path: /
      statements:
        # DynamoDB permissions for all tables and indexes
        - Effect: Allow
          Action:
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:DescribeTable
            - dynamodb:BatchWriteItem
            - dynamodb:BatchGetItem
          Resource:
            # Routes table and indexes
            - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.ROUTES_TABLE}"
            - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.ROUTES_TABLE}/index/*"
            # Buses table and indexes
            - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.BUSES_TABLE}"
            - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.BUSES_TABLE}/index/*"
            # Live Locations table and indexes
            - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.LIVE_LOCATIONS_TABLE}"
            - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.LIVE_LOCATIONS_TABLE}/index/*"
            # Legacy locations table (if still needed)
            - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.LOCATIONS_TABLE}"
            - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.LOCATIONS_TABLE}/index/*"

        - Effect: Allow
          Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - logs:DescribeLogEvents
            - logs:DescribeLogStreams
          Resource: "arn:aws:logs:${opt:region, self:provider.region}:*:log-group:/aws/lambda/${self:service}-${opt:stage, self:provider.stage}*:*"

        # Note: Additional deployment permissions are provided via the IAM policy
        # attached to the deployment user/role (see iam-policy.json)

        # VPC and ENI permissions for Lambda functions
        - Effect: Allow
          Action:
            - ec2:CreateNetworkInterface
            - ec2:DescribeNetworkInterfaces
            - ec2:DeleteNetworkInterface
            - ec2:AttachNetworkInterface
            - ec2:DetachNetworkInterface
          Resource: "*"

        # Redis ElastiCache permissions
        - Effect: Allow
          Action:
            - elasticache:DescribeCacheClusters
            - elasticache:DescribeReplicationGroups
          Resource: "*"

custom:

  redis:
    dev:
      host: localhost
      port: 6379
    staging:
      host: localhost
      port: 6379
    prod:
      host: !GetAtt RedisReplicationGroup.PrimaryEndPoint.Address
      port: !GetAtt RedisReplicationGroup.PrimaryEndPoint.Port

  dynamodb:
    start:
      port: 8000
      inMemory: true
      migrate: true
    stages:
      - dev

functions:
  getRoutes:
    handler: src/handlers/routes.getRoutes
    description: Get all bus routes
    events:
      - http:
          path: routes
          method: get
          cors: true

  getRoute:
    handler: src/handlers/routes.getRoute
    description: Get a specific bus route by ID
    events:
      - http:
          path: routes/{routeId}
          method: get
          cors: true
          request:
            parameters:
              paths:
                routeId: true

  updateLocation:
    handler: src/handlers/location.updateLocation
    description: Update bus location
    events:
      - http:
          path: buses/{busId}/location
          method: put
          cors: true
          request:
            parameters:
              paths:
                busId: true

  healthCheck:
    handler: src/handlers/health.ping
    description: Health check endpoint
    events:
      - http:
          path: status/ping
          method: get
          cors: true

  cacheInvalidator:
    handler: src/handlers/cache.invalidateCache
    description: DynamoDB stream processor for cache invalidation
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt: [LocationsTable, StreamArn]
          batchSize: 10
          enabled: true
          startingPosition: LATEST

resources:
  Resources:
    RoutesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.ROUTES_TABLE}
        AttributeDefinitions:
          - AttributeName: RouteID
            AttributeType: S
        KeySchema:
          - AttributeName: RouteID
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        # Additional attributes: route_name, start_location, end_location, description, total_stops
        # These are stored as document attributes and don't need to be defined in AttributeDefinitions

    BusesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.BUSES_TABLE}
        AttributeDefinitions:
          - AttributeName: BusID
            AttributeType: S
        KeySchema:
          - AttributeName: BusID
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        # Additional attributes: route_id, capacity, license_plate, status
        # These are stored as document attributes and don't need to be defined in AttributeDefinitions

    LocationsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.LOCATIONS_TABLE}
        AttributeDefinitions:
          - AttributeName: BusID
            AttributeType: S
          - AttributeName: timestamp
            AttributeType: S
          - AttributeName: route_id
            AttributeType: S
        KeySchema:
          - AttributeName: BusID
            KeyType: HASH
          - AttributeName: timestamp
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: RouteID-timestamp-index
            KeySchema:
              - AttributeName: route_id
                KeyType: HASH
              - AttributeName: timestamp
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        TimeToLiveSpecification:
          AttributeName: ttl
          Enabled: true

    LiveLocationsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.LIVE_LOCATIONS_TABLE}
        AttributeDefinitions:
          - AttributeName: BusID
            AttributeType: S
          - AttributeName: timestamp
            AttributeType: S
          - AttributeName: route_id
            AttributeType: S
        KeySchema:
          - AttributeName: BusID
            KeyType: HASH
          - AttributeName: timestamp
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: RouteID-timestamp-index
            KeySchema:
              - AttributeName: route_id
                KeyType: HASH
              - AttributeName: timestamp
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        TimeToLiveSpecification:
          AttributeName: ttl
          Enabled: true
        # Additional attributes: latitude, longitude, speed, heading, geohash
        # These are stored as document attributes and don't need to be defined in AttributeDefinitions

    # Redis ElastiCache Replication Group (only for production)
    RedisReplicationGroup:
      Type: AWS::ElastiCache::ReplicationGroup
      Condition: IsProduction
      Properties:
        ReplicationGroupId: ${self:service}-${opt:stage, self:provider.stage}-redis
        Description: Redis replication group for bus tracking system
        CacheNodeType: cache.t3.micro
        Engine: redis
        EngineVersion: "7.0"
        NumCacheClusters: 2  # 1 primary + 1 replica
        AutomaticFailoverEnabled: false
        MultiAZEnabled: false
        CacheSubnetGroupName: !Ref RedisSubnetGroup
        SecurityGroupIds:
          - !Ref RedisSecurityGroup
        AtRestEncryptionEnabled: true
        TransitEncryptionEnabled: false  # Disabled to avoid auth token complexity
        Port: 6379

    RedisSubnetGroup:
      Type: AWS::ElastiCache::SubnetGroup
      Condition: IsProduction
      Properties:
        Description: Subnet group for Redis cluster
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2

    # VPC Infrastructure
    VPC:
      Type: AWS::EC2::VPC
      Condition: IsProduction
      Properties:
        CidrBlock: 10.0.0.0/16
        EnableDnsHostnames: true
        EnableDnsSupport: true
        Tags:
          - Key: Name
            Value: ${self:service}-${opt:stage, self:provider.stage}-vpc

    InternetGateway:
      Type: AWS::EC2::InternetGateway
      Condition: IsProduction
      Properties:
        Tags:
          - Key: Name
            Value: ${self:service}-${opt:stage, self:provider.stage}-igw

    VPCGatewayAttachment:
      Type: AWS::EC2::VPCGatewayAttachment
      Condition: IsProduction
      Properties:
        VpcId: !Ref VPC
        InternetGatewayId: !Ref InternetGateway

    # Public Subnets
    PublicSubnet1:
      Type: AWS::EC2::Subnet
      Condition: IsProduction
      Properties:
        VpcId: !Ref VPC
        CidrBlock: 10.0.1.0/24
        AvailabilityZone: !Select [0, !GetAZs ""]
        MapPublicIpOnLaunch: true
        Tags:
          - Key: Name
            Value: ${self:service}-${opt:stage, self:provider.stage}-public-subnet-1

    PublicSubnet2:
      Type: AWS::EC2::Subnet
      Condition: IsProduction
      Properties:
        VpcId: !Ref VPC
        CidrBlock: 10.0.2.0/24
        AvailabilityZone: !Select [1, !GetAZs ""]
        MapPublicIpOnLaunch: true
        Tags:
          - Key: Name
            Value: ${self:service}-${opt:stage, self:provider.stage}-public-subnet-2

    # Private Subnets
    PrivateSubnet1:
      Type: AWS::EC2::Subnet
      Condition: IsProduction
      Properties:
        VpcId: !Ref VPC
        CidrBlock: 10.0.10.0/24
        AvailabilityZone: !Select [0, !GetAZs ""]
        Tags:
          - Key: Name
            Value: ${self:service}-${opt:stage, self:provider.stage}-private-subnet-1

    PrivateSubnet2:
      Type: AWS::EC2::Subnet
      Condition: IsProduction
      Properties:
        VpcId: !Ref VPC
        CidrBlock: 10.0.20.0/24
        AvailabilityZone: !Select [1, !GetAZs ""]
        Tags:
          - Key: Name
            Value: ${self:service}-${opt:stage, self:provider.stage}-private-subnet-2

    # NAT Gateway
    NatGatewayEIP:
      Type: AWS::EC2::EIP
      Condition: IsProduction
      DependsOn: VPCGatewayAttachment
      Properties:
        Domain: vpc
        Tags:
          - Key: Name
            Value: ${self:service}-${opt:stage, self:provider.stage}-nat-eip

    NatGateway:
      Type: AWS::EC2::NatGateway
      Condition: IsProduction
      Properties:
        AllocationId: !GetAtt NatGatewayEIP.AllocationId
        SubnetId: !Ref PublicSubnet1
        Tags:
          - Key: Name
            Value: ${self:service}-${opt:stage, self:provider.stage}-nat-gateway

    # Route Tables
    PublicRouteTable:
      Type: AWS::EC2::RouteTable
      Condition: IsProduction
      Properties:
        VpcId: !Ref VPC
        Tags:
          - Key: Name
            Value: ${self:service}-${opt:stage, self:provider.stage}-public-rt

    PublicRoute:
      Type: AWS::EC2::Route
      Condition: IsProduction
      DependsOn: VPCGatewayAttachment
      Properties:
        RouteTableId: !Ref PublicRouteTable
        DestinationCidrBlock: 0.0.0.0/0
        GatewayId: !Ref InternetGateway

    PublicSubnet1RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Condition: IsProduction
      Properties:
        SubnetId: !Ref PublicSubnet1
        RouteTableId: !Ref PublicRouteTable

    PublicSubnet2RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Condition: IsProduction
      Properties:
        SubnetId: !Ref PublicSubnet2
        RouteTableId: !Ref PublicRouteTable

    PrivateRouteTable:
      Type: AWS::EC2::RouteTable
      Condition: IsProduction
      Properties:
        VpcId: !Ref VPC
        Tags:
          - Key: Name
            Value: ${self:service}-${opt:stage, self:provider.stage}-private-rt

    PrivateRoute:
      Type: AWS::EC2::Route
      Condition: IsProduction
      Properties:
        RouteTableId: !Ref PrivateRouteTable
        DestinationCidrBlock: 0.0.0.0/0
        NatGatewayId: !Ref NatGateway

    PrivateSubnet1RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Condition: IsProduction
      Properties:
        SubnetId: !Ref PrivateSubnet1
        RouteTableId: !Ref PrivateRouteTable

    PrivateSubnet2RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Condition: IsProduction
      Properties:
        SubnetId: !Ref PrivateSubnet2
        RouteTableId: !Ref PrivateRouteTable

    # Security Groups
    ALBSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Condition: IsProduction
      Properties:
        GroupDescription: Security group for Application Load Balancer
        VpcId: !Ref VPC
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: 0.0.0.0/0
            Description: HTTP access from anywhere
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: 0.0.0.0/0
            Description: HTTPS access from anywhere
        SecurityGroupEgress:
          - IpProtocol: -1
            CidrIp: 0.0.0.0/0
            Description: All outbound traffic
        Tags:
          - Key: Name
            Value: ${self:service}-${opt:stage, self:provider.stage}-alb-sg

    LambdaSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Condition: IsProduction
      Properties:
        GroupDescription: Security group for Lambda functions
        VpcId: !Ref VPC
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            SourceSecurityGroupId: !Ref ALBSecurityGroup
            Description: HTTP from ALB
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            SourceSecurityGroupId: !Ref ALBSecurityGroup
            Description: HTTPS from ALB
        SecurityGroupEgress:
          - IpProtocol: -1
            CidrIp: 0.0.0.0/0
            Description: All outbound traffic
        Tags:
          - Key: Name
            Value: ${self:service}-${opt:stage, self:provider.stage}-lambda-sg

    RedisSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Condition: IsProduction
      Properties:
        GroupDescription: Security group for Redis cluster
        VpcId: !Ref VPC
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 6379
            ToPort: 6379
            SourceSecurityGroupId: !Ref LambdaSecurityGroup
            Description: Redis access from Lambda functions
        Tags:
          - Key: Name
            Value: ${self:service}-${opt:stage, self:provider.stage}-redis-sg

  Conditions:
    IsProduction:
      Fn::Equals:
        - ${opt:stage, self:provider.stage}
        - prod

  Outputs:
    VPCId:
      Description: VPC ID
      Value: !Ref VPC
      Condition: IsProduction
      Export:
        Name: ${self:service}-${opt:stage, self:provider.stage}-vpc-id

    PublicSubnet1Id:
      Description: Public subnet 1 ID
      Value: !Ref PublicSubnet1
      Condition: IsProduction
      Export:
        Name: ${self:service}-${opt:stage, self:provider.stage}-public-subnet-1

    PublicSubnet2Id:
      Description: Public subnet 2 ID
      Value: !Ref PublicSubnet2
      Condition: IsProduction
      Export:
        Name: ${self:service}-${opt:stage, self:provider.stage}-public-subnet-2

    PrivateSubnet1Id:
      Description: Private subnet 1 ID
      Value: !Ref PrivateSubnet1
      Condition: IsProduction
      Export:
        Name: ${self:service}-${opt:stage, self:provider.stage}-private-subnet-1

    PrivateSubnet2Id:
      Description: Private subnet 2 ID
      Value: !Ref PrivateSubnet2
      Condition: IsProduction
      Export:
        Name: ${self:service}-${opt:stage, self:provider.stage}-private-subnet-2

    ALBSecurityGroupId:
      Description: ALB security group ID
      Value: !Ref ALBSecurityGroup
      Condition: IsProduction
      Export:
        Name: ${self:service}-${opt:stage, self:provider.stage}-alb-sg

    LambdaSecurityGroupId:
      Description: Lambda security group ID
      Value: !Ref LambdaSecurityGroup
      Condition: IsProduction
      Export:
        Name: ${self:service}-${opt:stage, self:provider.stage}-lambda-sg

    RedisSecurityGroupId:
      Description: Redis security group ID
      Value: !Ref RedisSecurityGroup
      Condition: IsProduction
      Export:
        Name: ${self:service}-${opt:stage, self:provider.stage}-redis-sg

    RedisEndpointAddress:
      Description: Redis replication group primary endpoint address
      Value: !GetAtt RedisReplicationGroup.PrimaryEndPoint.Address
      Condition: IsProduction
      Export:
        Name: ${self:service}-${opt:stage, self:provider.stage}-redis-endpoint

    RedisEndpointPort:
      Description: Redis replication group primary endpoint port
      Value: !GetAtt RedisReplicationGroup.PrimaryEndPoint.Port
      Condition: IsProduction
      Export:
        Name: ${self:service}-${opt:stage, self:provider.stage}-redis-port

    NatGatewayId:
      Description: NAT Gateway ID
      Value: !Ref NatGateway
      Condition: IsProduction
      Export:
        Name: ${self:service}-${opt:stage, self:provider.stage}-nat-gateway

plugins:
  - serverless-offline
  - serverless-dynamodb-local
  # Uncomment for production VPC deployment
  # - serverless-vpc-plugin