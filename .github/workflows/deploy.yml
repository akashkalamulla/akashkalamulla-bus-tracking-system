name: Deploy Bus Tracking System

on:
  push:
    branches:
      - main
      - master # Support both main and master branches
  workflow_dispatch: # Allow manual triggering
    inputs:
      stage:
        description: "Deployment stage"
        required: false
        default: "dev"
        type: choice
        options:
          - dev
          - staging
          - prod

env:
  NODE_VERSION: "18"
  AWS_REGION: ${{ secrets.AWS_REGION || 'us-east-1' }}
  AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION || 'us-east-1' }}

jobs:
  test:
    name: Test and Lint
    runs-on: ubuntu-latest

    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: 📥 Install dependencies
        run: |
          npm ci
          echo "✅ Dependencies installed successfully"

      - name: 🔍 Run ESLint
        run: |
          echo "🔍 Running ESLint..."
          npm run lint:ci
          echo "✅ Linting completed successfully"

      - name: 🧪 Run tests with coverage
        run: |
          echo "🧪 Running tests with coverage..."
          npm run test:ci
          echo "✅ Tests completed successfully"

      - name: 📊 Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 🔒 Run npm audit
        run: |
          echo "🔒 Running security audit..."
          npm audit --audit-level moderate
          echo "✅ Security audit completed"

      - name: 🔍 Check for secrets
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || github.event_name == 'workflow_dispatch'
    environment:
      name: development
      url: https://api-dev.bus-tracking.com

    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: 📥 Install dependencies
        run: |
          npm ci
          echo "✅ Dependencies installed for deployment"

      - name: 🔐 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: 🔍 Validate AWS credentials and permissions
        run: |
          echo "🔍 Validating AWS credentials and permissions..."

          # Check if secrets are available
          if [ -z "${{ secrets.AWS_ACCESS_KEY_ID }}" ]; then
            echo "❌ AWS_ACCESS_KEY_ID secret is not set"
            exit 1
          fi
          if [ -z "${{ secrets.AWS_SECRET_ACCESS_KEY }}" ]; then
            echo "❌ AWS_SECRET_ACCESS_KEY secret is not set"
            exit 1
          fi

          # Validate AWS credentials
          echo "🔍 Testing AWS credentials..."
          aws sts get-caller-identity

          # Test specific permissions
          echo "🔍 Testing DynamoDB permissions..."
          aws dynamodb list-tables --max-items 1 >/dev/null 2>&1 || {
            echo "❌ Insufficient DynamoDB permissions"
            exit 1
          }

          echo "🔍 Testing Lambda permissions..."
          aws lambda list-functions --max-items 1 >/dev/null 2>&1 || {
            echo "❌ Insufficient Lambda permissions"
            exit 1
          }

          echo "🔍 Testing CloudFormation permissions..."
          aws cloudformation list-stacks --max-items 1 >/dev/null 2>&1 || {
            echo "❌ Insufficient CloudFormation permissions"
            exit 1
          }

          echo "✅ AWS credentials and permissions validated"

      - name: 📦 Install Serverless Framework
        run: |
          npm install -g serverless@3
          serverless --version
          echo "✅ Serverless Framework installed"

      - name: 🔧 Validate Serverless Configuration
        run: |
          echo "🔧 Validating serverless.yml configuration..."
          serverless print --stage dev --region ${{ env.AWS_REGION }}
          echo "✅ Serverless configuration is valid"

      - name: 🚀 Deploy to Development
        run: |
          echo "🚀 Deploying to development stage..."
          serverless deploy --stage dev --region ${{ env.AWS_REGION }} --verbose
          echo "✅ Deployment to development completed"
        env:
          STAGE: dev

      - name: 🧪 Post-deployment health check
        run: |
          echo "🧪 Running post-deployment health check..."

          # Wait for deployment to stabilize
          echo "⏳ Waiting 30 seconds for deployment to stabilize..."
          sleep 30

          # Get the API Gateway endpoint from serverless output
          echo "🔍 Retrieving API Gateway endpoint..."
          API_BASE_URL=$(serverless info --stage dev --region ${{ env.AWS_REGION }} | grep -o 'https://[^/]*\.execute-api\.[^/]*\.amazonaws\.com/dev' | head -1)

          if [ -n "$API_BASE_URL" ]; then
            HEALTH_ENDPOINT="${API_BASE_URL}/status/ping"
            echo "🔍 Testing health endpoint: $HEALTH_ENDPOINT"

            # Test health endpoint with retry logic
            for i in {1..5}; do
              echo "🔄 Attempt $i/5..."
              if curl -f -s -w "HTTPSTATUS:%{http_code}" "$HEALTH_ENDPOINT" | grep -q "HTTPSTATUS:200"; then
                echo "✅ Health check passed on attempt $i"
                curl -s "$HEALTH_ENDPOINT" | jq '.' 2>/dev/null || curl -s "$HEALTH_ENDPOINT"
                break
              else
                echo "❌ Health check failed on attempt $i, retrying in 10 seconds..."
                sleep 10
              fi
            done

            if [ $i -eq 5 ]; then
              echo "❌ Health check failed after 5 attempts"
              exit 1
            fi
          else
            echo "⚠️  Could not retrieve API Gateway endpoint, skipping health check"
          fi

      - name: 📋 Deployment Summary
        run: |
          echo "📋 Deployment Summary for Development:"
          echo "=========================================="
          serverless info --stage dev --region ${{ env.AWS_REGION }}

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: deploy-dev
    if: (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') && github.event_name != 'workflow_dispatch'
    environment:
      name: staging
      url: https://api-staging.bus-tracking.com

    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🔐 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: 📦 Install Serverless Framework
        run: npm install -g serverless@3

      - name: 🚀 Deploy to Staging
        run: |
          echo "🚀 Deploying to staging stage..."
          serverless deploy --stage staging --region ${{ env.AWS_REGION }} --verbose
          echo "✅ Deployment to staging completed"

      - name: 🧪 Staging health check
        run: |
          echo "🧪 Running staging health check..."
          sleep 30
          API_BASE_URL=$(serverless info --stage staging --region ${{ env.AWS_REGION }} | grep -o 'https://[^/]*\.execute-api\.[^/]*\.amazonaws\.com/staging' | head -1)
          if [ -n "$API_BASE_URL" ]; then
            HEALTH_ENDPOINT="${API_BASE_URL}/status/ping"
            curl -f "$HEALTH_ENDPOINT" > /dev/null && echo "✅ Staging health check passed" || echo "❌ Staging health check failed"
          fi

  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') && github.event_name != 'workflow_dispatch'
    environment:
      name: production
      url: https://api.bus-tracking.com

    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🔐 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
          aws-region: ${{ env.AWS_REGION }}

      - name: 📦 Install Serverless Framework
        run: npm install -g serverless@3

      - name: 🚀 Deploy to Production
        run: |
          echo "🚀 Deploying to production stage..."
          serverless deploy --stage prod --region ${{ env.AWS_REGION }} --verbose
          echo "✅ Deployment to production completed"

      - name: 🧪 Production health check
        run: |
          echo "🧪 Running production health check..."
          sleep 30
          API_BASE_URL=$(serverless info --stage prod --region ${{ env.AWS_REGION }} | grep -o 'https://[^/]*\.execute-api\.[^/]*\.amazonaws\.com/prod' | head -1)
          if [ -n "$API_BASE_URL" ]; then
            HEALTH_ENDPOINT="${API_BASE_URL}/status/ping"
            curl -f "$HEALTH_ENDPOINT" > /dev/null && echo "✅ Production health check passed" || echo "❌ Production health check failed"
          fi

      - name: 📋 Final Deployment Summary
        run: |
          echo "📋 Final Deployment Summary:"
          echo "==========================="
          serverless info --stage prod --region ${{ env.AWS_REGION }}
