openapi: 3.0.3
info:
  title: Bus Tracking System API
  description: |
    Real-time bus tracking and route management system built with AWS serverless architecture.
    
    **Author:** AKASH  
    **Index no:** COBSCCOMP4Y241P-008  
    **Coventry Id:** 15386593  
    **Module:** NB6007CEM
    
    ## Authentication
    Protected endpoints require JWT Bearer token with appropriate role:
    - **OPERATOR**: Can manage buses and update locations
    - **NTC** (Admin): Can manage routes, buses, and view analytics
    
    ## Base URLs
    - **Development:** `https://zcmux4xvg0.execute-api.ap-south-1.amazonaws.com/dev`
    - **Production:** `https://s8gu5u156h.execute-api.ap-south-1.amazonaws.com/production`
  version: 1.0.0
  contact:
    name: AKASH
    email: student@example.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://zcmux4xvg0.execute-api.ap-south-1.amazonaws.com/dev
    description: Development server
  - url: https://s8gu5u156h.execute-api.ap-south-1.amazonaws.com/production
    description: Production server

security: []

paths:
  # Health Check
  /health:
    get:
      tags:
        - Health
      summary: Service health check
      description: Returns the health status of the API service
      operationId: getHealth
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
        '500':
          description: Service is unhealthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Public Endpoints
  /public/routes:
    get:
      tags:
        - Public
      summary: Get all public routes
      description: Retrieve a list of all available bus routes (public access)
      operationId: getPublicRoutes
      parameters:
        - $ref: '#/components/parameters/LimitParam'
        - $ref: '#/components/parameters/OffsetParam'
      responses:
        '200':
          description: List of routes retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoutesListResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /public/buses:
    get:
      tags:
        - Public
      summary: Get all public buses
      description: Retrieve a list of all active buses (public access)
      operationId: getPublicBuses
      parameters:
        - $ref: '#/components/parameters/LimitParam'
        - $ref: '#/components/parameters/OffsetParam'
      responses:
        '200':
          description: List of buses retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BusesListResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /public/schedules:
    get:
      tags:
        - Public
      summary: Get bus schedules
      description: Retrieve bus schedules for public viewing
      operationId: getPublicSchedules
      parameters:
        - name: routeId
          in: query
          description: Filter schedules by route ID
          schema:
            type: string
        - name: date
          in: query
          description: Filter schedules by date (YYYY-MM-DD)
          schema:
            type: string
            format: date
      responses:
        '200':
          description: Schedules retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchedulesListResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /public/location/{busId}:
    get:
      tags:
        - Public
      summary: Get bus location
      description: Get the current location of a specific bus
      operationId: getPublicBusLocation
      parameters:
        - name: busId
          in: path
          required: true
          description: The ID of the bus
          schema:
            type: string
            example: "bus_1234567890_abc123"
      responses:
        '200':
          description: Bus location retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BusLocationResponse'
        '404':
          description: Bus not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Operator Endpoints
  /operator/buses:
    post:
      tags:
        - Operator
      summary: Create a new bus
      description: Create a new bus entry (requires OPERATOR role)
      operationId: createBus
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BusCreateRequest'
      responses:
        '201':
          description: Bus created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BusResponse'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /operator/buses/{busId}:
    get:
      tags:
        - Operator
      summary: Get bus details
      description: Get detailed information about a specific bus (requires OPERATOR role)
      operationId: getOperatorBus
      security:
        - bearerAuth: []
      parameters:
        - name: busId
          in: path
          required: true
          description: The ID of the bus
          schema:
            type: string
            example: "bus_1234567890_abc123"
      responses:
        '200':
          description: Bus details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BusResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Bus not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      tags:
        - Operator
      summary: Update bus details
      description: Update information about a specific bus (requires OPERATOR role)
      operationId: updateOperatorBus
      security:
        - bearerAuth: []
      parameters:
        - name: busId
          in: path
          required: true
          description: The ID of the bus
          schema:
            type: string
            example: "bus_1234567890_abc123"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BusUpdateRequest'
      responses:
        '200':
          description: Bus updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BusResponse'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Bus not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /operator/location:
    post:
      tags:
        - Operator
      summary: Update bus location
      description: Update the real-time location of a bus (requires OPERATOR role)
      operationId: updateBusLocation
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LocationUpdateRequest'
      responses:
        '200':
          description: Location updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocationUpdateResponse'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Admin Endpoints
  /admin/routes:
    get:
      tags:
        - Admin
      summary: Get all routes (Admin)
      description: Retrieve all routes with admin-level details (requires NTC role)
      operationId: getAdminRoutes
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/LimitParam'
        - $ref: '#/components/parameters/OffsetParam'
        - name: status
          in: query
          description: Filter routes by status
          schema:
            type: string
            enum: [ACTIVE, INACTIVE, SUSPENDED]
      responses:
        '200':
          description: Routes retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminRoutesListResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      tags:
        - Admin
      summary: Create a new route
      description: Create a new bus route (requires NTC role)
      operationId: createRoute
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RouteCreateRequest'
      responses:
        '201':
          description: Route created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RouteResponse'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /admin/routes/{routeId}:
    get:
      tags:
        - Admin
      summary: Get route details (Admin)
      description: Get detailed information about a specific route (requires NTC role)
      operationId: getAdminRoute
      security:
        - bearerAuth: []
      parameters:
        - name: routeId
          in: path
          required: true
          description: The ID of the route
          schema:
            type: string
            example: "route_1234567890_abc123"
      responses:
        '200':
          description: Route details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RouteResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Route not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      tags:
        - Admin
      summary: Update route details
      description: Update information about a specific route (requires NTC role)
      operationId: updateRoute
      security:
        - bearerAuth: []
      parameters:
        - name: routeId
          in: path
          required: true
          description: The ID of the route
          schema:
            type: string
            example: "route_1234567890_abc123"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RouteUpdateRequest'
      responses:
        '200':
          description: Route updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RouteResponse'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Route not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags:
        - Admin
      summary: Delete a route
      description: Delete a specific route (requires NTC role)
      operationId: deleteRoute
      security:
        - bearerAuth: []
      parameters:
        - name: routeId
          in: path
          required: true
          description: The ID of the route
          schema:
            type: string
            example: "route_1234567890_abc123"
      responses:
        '200':
          description: Route deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Route not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /admin/buses:
    get:
      tags:
        - Admin
      summary: Get all buses (Admin)
      description: Retrieve all buses with admin-level details (requires NTC role)
      operationId: getAdminBuses
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/LimitParam'
        - $ref: '#/components/parameters/OffsetParam'
        - name: status
          in: query
          description: Filter buses by status
          schema:
            type: string
            enum: [ACTIVE, INACTIVE, MAINTENANCE]
        - name: routeId
          in: query
          description: Filter buses by route ID
          schema:
            type: string
      responses:
        '200':
          description: Buses retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminBusesListResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      tags:
        - Admin
      summary: Create a new bus (Admin)
      description: Create a new bus entry with admin privileges (requires NTC role)
      operationId: createAdminBus
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminBusCreateRequest'
      responses:
        '201':
          description: Bus created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BusResponse'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /admin/buses/{busId}:
    put:
      tags:
        - Admin
      summary: Update bus details (Admin)
      description: Update bus information with admin privileges (requires NTC role)
      operationId: updateAdminBus
      security:
        - bearerAuth: []
      parameters:
        - name: busId
          in: path
          required: true
          description: The ID of the bus
          schema:
            type: string
            example: "bus_1234567890_abc123"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminBusUpdateRequest'
      responses:
        '200':
          description: Bus updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BusResponse'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Bus not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags:
        - Admin
      summary: Delete a bus
      description: Delete a specific bus (requires NTC role)
      operationId: deleteBus
      security:
        - bearerAuth: []
      parameters:
        - name: busId
          in: path
          required: true
          description: The ID of the bus
          schema:
            type: string
            example: "bus_1234567890_abc123"
      responses:
        '200':
          description: Bus deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Bus not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /admin/buses/{busId}/history:
    get:
      tags:
        - Admin
      summary: Get bus history
      description: Get the location and operational history of a specific bus (requires NTC role)
      operationId: getBusHistory
      security:
        - bearerAuth: []
      parameters:
        - name: busId
          in: path
          required: true
          description: The ID of the bus
          schema:
            type: string
            example: "bus_1234567890_abc123"
        - name: startDate
          in: query
          description: Start date for history (YYYY-MM-DD)
          schema:
            type: string
            format: date
        - name: endDate
          in: query
          description: End date for history (YYYY-MM-DD)
          schema:
            type: string
            format: date
        - $ref: '#/components/parameters/LimitParam'
      responses:
        '200':
          description: Bus history retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BusHistoryResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Bus not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        JWT Bearer token authentication. Include the token in the Authorization header:
        `Authorization: Bearer <your_jwt_token>`

  parameters:
    LimitParam:
      name: limit
      in: query
      description: Maximum number of results to return
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20
        example: 20

    OffsetParam:
      name: offset
      in: query
      description: Number of results to skip for pagination
      schema:
        type: integer
        minimum: 0
        default: 0
        example: 0

  schemas:
    # Common Response Schemas
    HealthResponse:
      type: object
      properties:
        status:
          type: string
          example: "OK"
        timestamp:
          type: string
          format: date-time
          example: "2025-10-13T10:30:00.000Z"
        environment:
          type: string
          example: "production"

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          example: "Validation Error"
        message:
          type: string
          example: "Invalid request parameters"
        timestamp:
          type: string
          format: date-time
          example: "2025-10-13T10:30:00.000Z"
        details:
          type: object
          additionalProperties: true

    SuccessResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Operation completed successfully"
        timestamp:
          type: string
          format: date-time
          example: "2025-10-13T10:30:00.000Z"

    # Route Schemas
    Route:
      type: object
      properties:
        RouteID:
          type: string
          example: "route_1234567890_abc123"
        route_name:
          type: string
          example: "Downtown Express"
        start_location:
          type: string
          example: "Central Station"
        end_location:
          type: string
          example: "East Park"
        description:
          type: string
          example: "Peak-hour express service"
        distance_km:
          type: number
          format: float
          example: 15.2
        total_stops:
          type: integer
          example: 6
        fare_rs:
          type: number
          format: float
          example: 120.0
        route_type:
          type: string
          enum: [local, express, inter-city]
          example: "express"
        status:
          type: string
          enum: [ACTIVE, INACTIVE, SUSPENDED]
          example: "ACTIVE"
        CreatedAt:
          type: string
          format: date-time
          example: "2025-10-13T10:30:00.000Z"
        UpdatedAt:
          type: string
          format: date-time
          example: "2025-10-13T10:30:00.000Z"

    RouteCreateRequest:
      type: object
      required:
        - route_name
        - start_location
        - end_location
      properties:
        route_name:
          type: string
          example: "Downtown Express"
          minLength: 1
          maxLength: 100
        start_location:
          type: string
          example: "Central Station"
          minLength: 1
          maxLength: 100
        end_location:
          type: string
          example: "East Park"
          minLength: 1
          maxLength: 100
        description:
          type: string
          example: "Peak-hour express service"
          maxLength: 500
        distance_km:
          type: number
          format: float
          minimum: 0
          example: 15.2
        total_stops:
          type: integer
          minimum: 0
          example: 6
        fare_rs:
          type: number
          format: float
          minimum: 0
          example: 120.0
        route_type:
          type: string
          enum: [local, express, inter-city]
          example: "express"
        status:
          type: string
          enum: [ACTIVE, INACTIVE, SUSPENDED]
          default: "ACTIVE"
          example: "ACTIVE"

    RouteUpdateRequest:
      type: object
      properties:
        route_name:
          type: string
          example: "Downtown Express"
          minLength: 1
          maxLength: 100
        start_location:
          type: string
          example: "Central Station"
          minLength: 1
          maxLength: 100
        end_location:
          type: string
          example: "East Park"
          minLength: 1
          maxLength: 100
        description:
          type: string
          example: "Peak-hour express service"
          maxLength: 500
        distance_km:
          type: number
          format: float
          minimum: 0
          example: 15.2
        total_stops:
          type: integer
          minimum: 0
          example: 6
        fare_rs:
          type: number
          format: float
          minimum: 0
          example: 120.0
        route_type:
          type: string
          enum: [local, express, inter-city]
          example: "express"
        status:
          type: string
          enum: [ACTIVE, INACTIVE, SUSPENDED]
          example: "ACTIVE"

    RouteResponse:
      allOf:
        - $ref: '#/components/schemas/Route'
        - type: object
          properties:
            success:
              type: boolean
              example: true
            timestamp:
              type: string
              format: date-time
              example: "2025-10-13T10:30:00.000Z"

    RoutesListResponse:
      type: object
      properties:
        routes:
          type: array
          items:
            $ref: '#/components/schemas/Route'
        count:
          type: integer
          example: 25
        total:
          type: integer
          example: 100
        pagination:
          type: object
          properties:
            limit:
              type: integer
              example: 20
            offset:
              type: integer
              example: 0
            hasMore:
              type: boolean
              example: true

    AdminRoutesListResponse:
      allOf:
        - $ref: '#/components/schemas/RoutesListResponse'
        - type: object
          properties:
            adminContext:
              type: object
              properties:
                accessLevel:
                  type: string
                  example: "NTC"
                viewType:
                  type: string
                  example: "ADMIN"

    # Bus Schemas
    Bus:
      type: object
      properties:
        BusID:
          type: string
          example: "bus_1234567890_abc123"
        BusNumber:
          type: string
          example: "NC-123"
        OperatorID:
          type: string
          example: "OP1234567890123"
        RouteID:
          type: string
          example: "route_1234567890_abc123"
        Capacity:
          type: integer
          example: 50
        Model:
          type: string
          example: "Volvo B7R"
        Year:
          type: integer
          example: 2024
        Status:
          type: string
          enum: [ACTIVE, INACTIVE, MAINTENANCE]
          example: "ACTIVE"
        CreatedAt:
          type: string
          format: date-time
          example: "2025-10-13T10:30:00.000Z"
        UpdatedAt:
          type: string
          format: date-time
          example: "2025-10-13T10:30:00.000Z"

    BusCreateRequest:
      type: object
      required:
        - busNumber
        - capacity
        - routeId
      properties:
        busNumber:
          type: string
          example: "NC-123"
          minLength: 1
          maxLength: 20
        capacity:
          type: integer
          minimum: 1
          maximum: 200
          example: 50
        routeId:
          type: string
          example: "route_1234567890_abc123"
        model:
          type: string
          example: "Volvo B7R"
          maxLength: 50
        year:
          type: integer
          minimum: 1990
          maximum: 2030
          example: 2024
        status:
          type: string
          enum: [ACTIVE, INACTIVE, MAINTENANCE]
          default: "ACTIVE"
          example: "ACTIVE"

    BusUpdateRequest:
      type: object
      properties:
        busNumber:
          type: string
          example: "NC-123"
          minLength: 1
          maxLength: 20
        capacity:
          type: integer
          minimum: 1
          maximum: 200
          example: 50
        routeId:
          type: string
          example: "route_1234567890_abc123"
        model:
          type: string
          example: "Volvo B7R"
          maxLength: 50
        year:
          type: integer
          minimum: 1990
          maximum: 2030
          example: 2024
        status:
          type: string
          enum: [ACTIVE, INACTIVE, MAINTENANCE]
          example: "ACTIVE"

    AdminBusCreateRequest:
      allOf:
        - $ref: '#/components/schemas/BusCreateRequest'
        - type: object
          properties:
            operatorId:
              type: string
              example: "OP1234567890123"

    AdminBusUpdateRequest:
      allOf:
        - $ref: '#/components/schemas/BusUpdateRequest'
        - type: object
          properties:
            operatorId:
              type: string
              example: "OP1234567890123"

    BusResponse:
      allOf:
        - $ref: '#/components/schemas/Bus'
        - type: object
          properties:
            success:
              type: boolean
              example: true
            timestamp:
              type: string
              format: date-time
              example: "2025-10-13T10:30:00.000Z"

    BusesListResponse:
      type: object
      properties:
        buses:
          type: array
          items:
            $ref: '#/components/schemas/Bus'
        count:
          type: integer
          example: 15
        total:
          type: integer
          example: 75
        pagination:
          type: object
          properties:
            limit:
              type: integer
              example: 20
            offset:
              type: integer
              example: 0
            hasMore:
              type: boolean
              example: true

    AdminBusesListResponse:
      allOf:
        - $ref: '#/components/schemas/BusesListResponse'
        - type: object
          properties:
            adminContext:
              type: object
              properties:
                accessLevel:
                  type: string
                  example: "NTC"
                viewType:
                  type: string
                  example: "ADMIN"

    # Location Schemas
    Location:
      type: object
      properties:
        busId:
          type: string
          example: "bus_1234567890_abc123"
        lat:
          type: number
          format: double
          minimum: -90
          maximum: 90
          example: 6.9271
        lng:
          type: number
          format: double
          minimum: -180
          maximum: 180
          example: 79.8612
        timestamp:
          type: string
          format: date-time
          example: "2025-10-13T10:30:00.000Z"
        speed:
          type: number
          format: float
          minimum: 0
          example: 45.5
        heading:
          type: number
          format: float
          minimum: 0
          maximum: 360
          example: 90.0
        accuracy:
          type: number
          format: float
          minimum: 0
          example: 5.0

    LocationUpdateRequest:
      type: object
      required:
        - busId
        - lat
        - lng
        - timestamp
      properties:
        busId:
          type: string
          example: "bus_1234567890_abc123"
        lat:
          type: number
          format: double
          minimum: -90
          maximum: 90
          example: 6.9271
        lng:
          type: number
          format: double
          minimum: -180
          maximum: 180
          example: 79.8612
        timestamp:
          type: string
          format: date-time
          example: "2025-10-13T10:30:00.000Z"
        speed:
          type: number
          format: float
          minimum: 0
          example: 45.5
        heading:
          type: number
          format: float
          minimum: 0
          maximum: 360
          example: 90.0
        accuracy:
          type: number
          format: float
          minimum: 0
          example: 5.0

    LocationUpdateResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        busId:
          type: string
          example: "bus_1234567890_abc123"
        locationId:
          type: string
          example: "loc_1234567890_xyz789"
        timestamp:
          type: string
          format: date-time
          example: "2025-10-13T10:30:00.000Z"
        message:
          type: string
          example: "Location updated successfully"

    BusLocationResponse:
      type: object
      properties:
        busId:
          type: string
          example: "bus_1234567890_abc123"
        location:
          $ref: '#/components/schemas/Location'
        lastUpdate:
          type: string
          format: date-time
          example: "2025-10-13T10:30:00.000Z"
        status:
          type: string
          example: "ACTIVE"

    # Schedule Schemas
    Schedule:
      type: object
      properties:
        scheduleId:
          type: string
          example: "schedule_1234567890_abc123"
        routeId:
          type: string
          example: "route_1234567890_abc123"
        busId:
          type: string
          example: "bus_1234567890_abc123"
        departureTime:
          type: string
          format: time
          example: "08:30:00"
        arrivalTime:
          type: string
          format: time
          example: "10:15:00"
        date:
          type: string
          format: date
          example: "2025-10-13"
        status:
          type: string
          enum: [SCHEDULED, ACTIVE, COMPLETED, CANCELLED]
          example: "SCHEDULED"
        CreatedAt:
          type: string
          format: date-time
          example: "2025-10-13T10:30:00.000Z"

    SchedulesListResponse:
      type: object
      properties:
        schedules:
          type: array
          items:
            $ref: '#/components/schemas/Schedule'
        count:
          type: integer
          example: 12
        total:
          type: integer
          example: 50
        pagination:
          type: object
          properties:
            limit:
              type: integer
              example: 20
            offset:
              type: integer
              example: 0
            hasMore:
              type: boolean
              example: true

    # History Schemas
    BusHistoryEntry:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
          example: "2025-10-13T10:30:00.000Z"
        event:
          type: string
          enum: [LOCATION_UPDATE, STATUS_CHANGE, ROUTE_ASSIGNMENT, MAINTENANCE]
          example: "LOCATION_UPDATE"
        data:
          type: object
          additionalProperties: true
          example:
            lat: 6.9271
            lng: 79.8612
            speed: 45.5
        description:
          type: string
          example: "Bus location updated"

    BusHistoryResponse:
      type: object
      properties:
        busId:
          type: string
          example: "bus_1234567890_abc123"
        history:
          type: array
          items:
            $ref: '#/components/schemas/BusHistoryEntry'
        count:
          type: integer
          example: 50
        dateRange:
          type: object
          properties:
            startDate:
              type: string
              format: date
              example: "2025-10-01"
            endDate:
              type: string
              format: date
              example: "2025-10-13"
        pagination:
          type: object
          properties:
            limit:
              type: integer
              example: 20
            offset:
              type: integer
              example: 0
            hasMore:
              type: boolean
              example: true

tags:
  - name: Health
    description: Service health and status endpoints
  - name: Public
    description: Public endpoints accessible without authentication
  - name: Operator
    description: Operator endpoints requiring OPERATOR role
  - name: Admin
    description: Admin endpoints requiring NTC role